import{u as $e,j as i,F as w,r as g,T as Re,D as qe,L as Oe,a as Ie}from"./iframe-B7-FIq8Y.js";import{M as je,u as Se,a as De,C as Y,N as F,b as M,z as Le,n as Q,c as He,P as x,D as $,B as Ve,d as ge,g as Ae,e as ze,f as We,h as Ye,i as Fe,S as Ze,j as Be,k as oe,l as Ke,m as J,o as ee}from"./node-BYhwsHKR.js";import"./index-XwvY4heS.js";const Xe=200,Ge=100,he=()=>{const n=$e();return i.jsx(je,{maskColor:n.minimap.mask,nodeColor:n.minimap.node,style:{width:Xe,height:Ge,background:n.minimap.selectionArea}})};he.__docgenInfo={description:"",methods:[],displayName:"MiniMap"};const q=n=>{const{data:e,...t}=n;return{...t,...e,type:n.type}},O=n=>n.map(e=>q(e)),Ue=n=>{const{title:e,fields:t,borderVariant:o,disabled:s,connectable:a,...r}=n;return{...r,connectable:a??!1,data:{title:e,disabled:s,fields:t,borderVariant:o}}},B=n=>n.map(e=>Ue(e)),A=n=>{const{markerStart:e,markerEnd:t,type:o,...s}=n;return{...s,markerStart:e==null?void 0:e.replace(/^start-/,""),markerEnd:t==null?void 0:t.replace(/^end-/,"")}},Qe=n=>n.map(e=>A(e)),Je=n=>({...n,markerStart:`start-${n.markerStart}`,markerEnd:`end-${n.markerEnd}`,type:n.source===n.target?"selfReferencingEdge":"floatingEdge"}),K=n=>n.map(e=>Je(e));function en(){const n=Se();return{...n,getNode:e=>{const t=n.getNode(e);if(t)return q(t)},getNodes:()=>n.getNodes().map(q),addNodes:e=>{const t=B(e);n.addNodes(t)},setNodes:e=>{const t=B(e);n.setNodes(t)},getEdge:e=>{const t=n.getEdge(e);if(t)return A(t)},getEdges:()=>n.getEdges().map(A),addEdges:e=>{const t=K(e);n.addEdges(t)},setEdges:e=>{const t=K(e);n.setEdges(t)}}}const Z={duration:500},nn=Q(He)`
  box-shadow: unset;
  display: flex;
  flex-direction: row;
  align-items: flex-end;
  gap: ${M[300]}px;
  font-size: 11px;
  color: ${n=>n.theme.controls.zoomText};
  font-family: ${Le.code};
`,tn=Q.div`
  > .react-flow__controls-button {
    background-color: ${n=>n.theme.controls.background};
    border: 1px solid ${w.gray.base};
    height: ${M[600]+M[100]}px;
    width: ${M[600]+M[100]}px;
    color: ${n=>n.theme.controls.buttonColor};
  }
  > .react-flow__controls-button:hover {
    background-color: ${n=>n.theme.controls.backgroundHover};
  }
  > *:first-of-type {
    border-top-left-radius: ${M[150]}px;
    border-top-right-radius: ${M[150]}px;
  }
  > *:last-of-type {
    border-bottom-left-radius: ${M[150]}px;
    border-bottom-right-radius: ${M[150]}px;
  }
`,ye=({title:n})=>{const{zoomIn:e,zoomOut:t,fitView:o}=en(),{zoom:s}=De();return i.jsxs(nn,{position:"bottom-left",showFitView:!1,showInteractive:!1,showZoom:!1,children:[i.jsxs(tn,{children:[i.jsx(Y,{onClick:()=>e(Z),children:i.jsx(F,{glyph:"Plus"})}),i.jsx(Y,{onClick:()=>t(Z),children:i.jsx(F,{glyph:"Minus"})}),i.jsx(Y,{onClick:()=>o(Z),children:i.jsx(F,{glyph:"FullScreenEnter"})})]}),`${Math.round(s*100)}%${n?`  ${n}`:""}`]})};ye.__docgenInfo={description:"",methods:[],displayName:"Controls",props:{title:{required:!1,tsType:{name:"string"},description:""}}};const se=(n,e)=>{const{width:t,height:o}=n.measured??{width:0,height:0},s=e.position,a=(t??0)/2,r=(o??0)/2,d=n.position.x+a,l=n.position.y+r,u=s.x+a,c=s.y+r,m=(u-d)/(2*a)-(c-l)/(2*r),p=(u-d)/(2*a)+(c-l)/(2*r),h=1/(Math.abs(m)+Math.abs(p)),y=h*m,f=h*p,b=a*(y+f)+d,_=r*(-y+f)+l;return{x:b,y:_}},re=(n,e)=>{var d,l;const t={...n.position,...n},o=Math.round(t.x),s=Math.round(t.y),a=Math.round(e.x),r=Math.round(e.y);return a<=o+1?x.Left:a>=o+(((d=t.measured)==null?void 0:d.width)??0)-1?x.Right:r<=s+1?x.Top:r>=t.y+(((l=t.measured)==null?void 0:l.height)??0)-1?x.Bottom:x.Top},ae=(n,{x:e,y:t})=>{const o=$/2;switch(n){case x.Left:return{x:e-o,y:t};case x.Top:return{x:e,y:t-o};case x.Right:return{x:e+o,y:t};case x.Bottom:return{x:e,y:t+o};default:return{x:e,y:t}}},on=(n,e)=>{const t=se(n,e),o=se(e,n),s=re(n,t),a=re(e,o),r=ae(s,t),d=ae(a,o);return{sx:r.x,sy:r.y,tx:d.x,ty:d.y,sourcePos:s,targetPos:a}},ie=(n,e)=>n?e==null?void 0:e.replace(/'\)/,"-selected')"):e,ne=({markerStart:n,markerEnd:e,selected:t,...o})=>i.jsx(Ve,{markerEnd:ie(t,e),markerStart:ie(t,n),style:{stroke:t?w.blue.base:w.gray.base},...o});ne.__docgenInfo={description:"",methods:[],displayName:"Edge",props:{selected:{required:!1,tsType:{name:"boolean"},description:""},path:{required:!0,tsType:{name:"string"},description:""}},composes:["SVGAttributes"]};const fe=({id:n,source:e,target:t,markerEnd:o,markerStart:s,selected:a})=>{const r=ge(),{sourceNode:d,targetNode:l}=g.useMemo(()=>{const b=r.find(T=>T.id===e),_=r.find(T=>T.id===t);return{sourceNode:b,targetNode:_}},[r,e,t]);if(!d||!l)return null;const{sx:u,sy:c,tx:m,ty:p,sourcePos:h,targetPos:y}=on(d,l),[f]=Ae({sourceX:u,sourceY:c,sourcePosition:h,targetPosition:y,targetX:m,targetY:p});return i.jsx(ne,{"data-testid":`floating-edge-${n}`,markerEnd:o,markerStart:s,path:f,id:n,selected:a})};fe.__docgenInfo={description:"",methods:[],displayName:"FloatingEdge"};const X=Math.PI,G=2*X,C=1e-6,sn=G-C;function ve(n){this._+=n[0];for(let e=1,t=n.length;e<t;++e)this._+=arguments[e]+n[e]}function rn(n){let e=Math.floor(n);if(!(e>=0))throw new Error(`invalid digits: ${n}`);if(e>15)return ve;const t=10**e;return function(o){this._+=o[0];for(let s=1,a=o.length;s<a;++s)this._+=Math.round(arguments[s]*t)/t+o[s]}}class Ee{constructor(e){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=e==null?ve:rn(e)}moveTo(e,t){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}`}closePath(){this._x1!==null&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(e,t){this._append`L${this._x1=+e},${this._y1=+t}`}quadraticCurveTo(e,t,o,s){this._append`Q${+e},${+t},${this._x1=+o},${this._y1=+s}`}bezierCurveTo(e,t,o,s,a,r){this._append`C${+e},${+t},${+o},${+s},${this._x1=+a},${this._y1=+r}`}arcTo(e,t,o,s,a){if(e=+e,t=+t,o=+o,s=+s,a=+a,a<0)throw new Error(`negative radius: ${a}`);let r=this._x1,d=this._y1,l=o-e,u=s-t,c=r-e,m=d-t,p=c*c+m*m;if(this._x1===null)this._append`M${this._x1=e},${this._y1=t}`;else if(p>C)if(!(Math.abs(m*l-u*c)>C)||!a)this._append`L${this._x1=e},${this._y1=t}`;else{let h=o-r,y=s-d,f=l*l+u*u,b=h*h+y*y,_=Math.sqrt(f),T=Math.sqrt(p),N=a*Math.tan((X-Math.acos((f+p-b)/(2*_*T)))/2),k=N/T,R=N/_;Math.abs(k-1)>C&&this._append`L${e+k*c},${t+k*m}`,this._append`A${a},${a},0,0,${+(m*h>c*y)},${this._x1=e+R*l},${this._y1=t+R*u}`}}arc(e,t,o,s,a,r){if(e=+e,t=+t,o=+o,r=!!r,o<0)throw new Error(`negative radius: ${o}`);let d=o*Math.cos(s),l=o*Math.sin(s),u=e+d,c=t+l,m=1^r,p=r?s-a:a-s;this._x1===null?this._append`M${u},${c}`:(Math.abs(this._x1-u)>C||Math.abs(this._y1-c)>C)&&this._append`L${u},${c}`,o&&(p<0&&(p=p%G+G),p>sn?this._append`A${o},${o},0,1,${m},${e-d},${t-l}A${o},${o},0,1,${m},${this._x1=u},${this._y1=c}`:p>C&&this._append`A${o},${o},0,${+(p>=X)},${m},${this._x1=e+o*Math.cos(a)},${this._y1=t+o*Math.sin(a)}`)}rect(e,t,o,s){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}h${o=+o}v${+s}h${-o}Z`}toString(){return this._}}function we(){return new Ee}we.prototype=Ee.prototype;const be=({id:n,source:e,markerEnd:t,markerStart:o,selected:s})=>{var I,j;const a=ge(),{sourceNode:r}=g.useMemo(()=>({sourceNode:a.find(z=>z.id===e)}),[a,e]);if(!r)return null;const d=(((I=r.measured)==null?void 0:I.width)||0)/2,l=(((j=r.measured)==null?void 0:j.height)||0)/2,u=d+40,c=30,m=l+c,p=r.position.x+d,h=r.position.y-$/2,y=p,f=h-c,b=p+u,_=f,T=b,N=_+m,k=b-u+d+$/2,R=N,P=we();return P.moveTo(p,h),P.lineTo(y,f),P.lineTo(b,f),P.lineTo(T,N),P.lineTo(k,R),i.jsx(ne,{"data-testid":`self-referencing-edge-${n}`,markerEnd:t,markerStart:o,path:P.toString(),selected:s,id:n})};be.__docgenInfo={description:"",methods:[],displayName:"SelfReferencingEdge"};const _e=({children:n,id:e,...t})=>i.jsx("marker",{id:e,markerHeight:$,markerWidth:$,refX:$/2,refY:$/2,fill:w.gray.base,...t,children:n});_e.__docgenInfo={description:"",methods:[],displayName:"Marker"};const S=n=>g.createElement("svg",{width:15,height:15,viewBox:"0 0 15 15",xmlns:"http://www.w3.org/2000/svg",...n},g.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M6 7V6.99515H6.00982L15 0.357803V1.6008L7.69345 6.99515H15V7V7.99515V8H7.68985L15 13.397V14.64L6.00622 8H6V8.00006H4V13H3V8.00006H0V8V7.00006V7H3V2H4V7H6Z"})),D=n=>g.createElement("svg",{width:15,height:15,viewBox:"0 0 15 15",xmlns:"http://www.w3.org/2000/svg",...n},g.createElement("path",{d:"M6 8.00485V7.99994H0V6.99994H6V7.00485H6.00456L6.00283 7.0025L15 0.359985V1.60299L7.68328 7.00485H15V8.00485H7.69345L15 13.3992V14.6422L6.00982 8.00485H6Z"})),L=n=>g.createElement("svg",{width:15,height:15,viewBox:"0 0 15 15",xmlns:"http://www.w3.org/2000/svg",...n},g.createElement("path",{d:"M4 8V13H3V8L0 8V7L3 7V2H4V7L15 7V8L4 8Z"})),an={"start-oneOrMany":{component:i.jsx(S,{}),orient:"auto-start-reverse"},"start-oneOrMany-selected":{component:i.jsx(S,{}),orient:"auto-start-reverse",fill:w.blue.base},"end-oneOrMany":{component:i.jsx(S,{}),orient:"auto"},"end-oneOrMany-selected":{component:i.jsx(S,{}),orient:"auto",fill:w.blue.base},"start-one":{component:i.jsx(L,{}),orient:"auto-start-reverse"},"start-one-selected":{component:i.jsx(L,{}),orient:"auto-start-reverse",fill:w.blue.base},"end-one":{component:i.jsx(L,{}),orient:"auto"},"end-one-selected":{component:i.jsx(L,{}),orient:"auto",fill:w.blue.base},"start-many":{component:i.jsx(D,{}),orient:"auto-start-reverse"},"start-many-selected":{component:i.jsx(D,{}),orient:"auto-start-reverse",fill:w.blue.base},"end-many":{component:i.jsx(D,{}),orient:"auto"},"end-many-selected":{component:i.jsx(D,{}),orient:"auto",fill:w.blue.base}},Te=()=>i.jsx("svg",{children:i.jsx("defs",{children:Object.entries(an).map(([n,{component:e,...t}])=>i.jsx(_e,{"data-testid":n,id:n,...t,children:e},n))})});Te.__docgenInfo={description:"",methods:[],displayName:"MarkerList"};const Me=({fromX:n,fromY:e,toX:t,toY:o})=>{const[s]=ze({sourceX:n,sourceY:e,targetX:t,targetY:o});return i.jsxs("g",{children:[i.jsx("circle",{cx:n,cy:e,fill:w.blue.base,r:4}),i.jsx("path",{"data-testid":"connection-line",style:{animation:"dashdraw 0.5s linear infinite"},d:s,fill:"none",stroke:w.blue.base,strokeDasharray:5,strokeWidth:2})]})};Me.__docgenInfo={description:"",methods:[],displayName:"ConnectionLine"};const dn=3,ln=.1,cn={hideAttribution:!0},un=Q.div`
  height: 100%;
  background: ${n=>n.theme.background};
`,mn={table:oe,collection:oe},pn={floatingEdge:fe,selfReferencingEdge:be},xe=({title:n,nodes:e,edges:t,onConnect:o,id:s,onNodeContextMenu:a,onNodeDrag:r,onNodeDragStop:d,onEdgeClick:l,onSelectionDragStop:u,onSelectionContextMenu:c,onSelectionChange:m,...p})=>{const h=g.useMemo(()=>B(e),[e]),y=g.useMemo(()=>K(t),[t]),[f,b,_]=We(h),[T,N,k]=Ye(y);g.useEffect(()=>{b(h)},[h]),g.useEffect(()=>{N(y)},[y]);const R=g.useCallback((v,E)=>{a==null||a(v,q(E))},[a]),P=g.useCallback((v,E,W)=>{r==null||r(v,q(E),O(W))},[r]),I=g.useCallback((v,E,W)=>{d==null||d(v,q(E),O(W))},[d]),j=g.useCallback((v,E)=>{u==null||u(v,O(E))},[u]),te=g.useCallback((v,E)=>{l==null||l(v,A(E))},[l]),z=g.useCallback((v,E)=>{c==null||c(v,O(E))},[c]),Ce=g.useCallback(({nodes:v,edges:E})=>{m==null||m({nodes:O(v),edges:Qe(E)})},[m]);return i.jsx(un,{children:i.jsxs(Fe,{id:s,deleteKeyCode:null,proOptions:cn,maxZoom:dn,minZoom:ln,nodeTypes:mn,edgeTypes:pn,nodes:f,onlyRenderVisibleElements:!0,edges:T,connectionLineComponent:Me,connectionMode:Be.Loose,onNodesChange:_,onEdgesChange:k,selectionMode:Ze.Partial,nodesDraggable:!0,onConnect:o,onNodeContextMenu:R,onNodeDrag:P,onNodeDragStop:I,onSelectionDragStop:j,onEdgeClick:te,onSelectionContextMenu:z,onSelectionChange:Ce,...p,children:[i.jsx(Te,{}),i.jsx(Ke,{id:s}),i.jsx(ye,{title:n}),i.jsx(he,{})]})})};xe.__docgenInfo={description:"",methods:[],displayName:"Canvas",props:{id:{required:!1,tsType:{name:"string"},description:"Unique identifier for the diagram instance."},title:{required:!1,tsType:{name:"string"},description:"Title used for the diagram, displayed next to the controls."},isDarkMode:{required:!1,tsType:{name:"boolean"},description:"Whether the diagram should render in dark mode."},nodes:{required:!0,tsType:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},description:"Nodes to render in the diagram."},edges:{required:!0,tsType:{name:"Array",elements:[{name:"EdgeProps"}],raw:"EdgeProps[]"},description:"Edges to render in the diagram."},className:{required:!1,tsType:{name:"string"},description:"Optional CSS class to apply to the React Flow container."},onConnect:{required:!1,tsType:{name:"signature",type:"function",raw:"(connection: Connection) => void",signature:{arguments:[{type:{name:"Connection"},name:"connection"}],return:{name:"void"}}},description:"Callback when a new connection is made between nodes."},onPaneClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"}],return:{name:"void"}}},description:"Callback when the user clicks on the empty canvas."},onEdgeClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, edge: EdgeProps) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"EdgeProps"},name:"edge"}],return:{name:"void"}}},description:"Callback when the user clicks on an edge."},onNodeContextMenu:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, node: NodeProps) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"NodeProps"},name:"node"}],return:{name:"void"}}},description:"Callback when the user right-clicks on a node."},onSelectionContextMenu:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, nodes: NodeProps[]) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},name:"nodes"}],return:{name:"void"}}},description:"Callback when the user right-clicks with multiple elements selected."},onSelectionChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(params: { nodes: NodeProps[]; edges: EdgeProps[] }) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:"{ nodes: NodeProps[]; edges: EdgeProps[] }",signature:{properties:[{key:"nodes",value:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]",required:!0}},{key:"edges",value:{name:"Array",elements:[{name:"EdgeProps"}],raw:"EdgeProps[]",required:!0}}]}},name:"params"}],return:{name:"void"}}},description:"Callback when the selection of nodes or edges changes."},onSelectionDragStop:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, nodes: NodeProps[]) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},name:"nodes"}],return:{name:"void"}}},description:"Callback when dragging a selected group of elements ends."},onNodeDrag:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, node: NodeProps, nodes: NodeProps[]) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"NodeProps"},name:"node"},{type:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},name:"nodes"}],return:{name:"void"}}},description:"Callback when a node is dragged."},onNodeDragStop:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, node: NodeProps, nodes: NodeProps[]) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"NodeProps"},name:"node"},{type:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},name:"nodes"}],return:{name:"void"}}},description:"Callback when a node finishes being dragged."},onConnectStart:{required:!1,tsType:{name:"signature",type:"function",raw:`(
  event: MouseEvent | TouchEvent,
  params: { nodeId?: string | null; handleType: HandleType | null; handleId?: string | null },
) => void`,signature:{arguments:[{type:{name:"union",raw:"MouseEvent | TouchEvent",elements:[{name:"MouseEvent"},{name:"TouchEvent"}]},name:"event"},{type:{name:"signature",type:"object",raw:"{ nodeId?: string | null; handleType: HandleType | null; handleId?: string | null }",signature:{properties:[{key:"nodeId",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"handleType",value:{name:"union",raw:"HandleType | null",elements:[{name:"HandleType"},{name:"null"}],required:!0}},{key:"handleId",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}}]}},name:"params"}],return:{name:"void"}}},description:"Callback when a new connection starts (e.g. user begins dragging from a handle)."},panOnDrag:{required:!1,tsType:{name:"union",raw:"boolean | number[]",elements:[{name:"boolean"},{name:"Array",elements:[{name:"number"}],raw:"number[]"}]},description:"Whether the diagram should pan when dragging elements."},fitViewOptions:{required:!1,tsType:{name:"FitViewOptions"},description:"Options to control how `fitView` behaves."},selectionKeyCode:{required:!1,tsType:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}]},description:"Key code used to trigger selection mode."},multiSelectionKeyCode:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:"Key code used to enable multi-selection mode."},zoomOnPinch:{required:!1,tsType:{name:"boolean"},description:"Whether to allow zooming via pinch gestures."},zoomOnScroll:{required:!1,tsType:{name:"boolean"},description:"Whether to allow zooming via scroll."},maxZoom:{required:!1,tsType:{name:"number"},description:"Maximum allowed zoom level."},minZoom:{required:!1,tsType:{name:"number"},description:"Minimum allowed zoom level."},onlyRenderVisibleElements:{required:!1,tsType:{name:"boolean"},description:`Whether to only render elements that are currently visible in the viewport.
This can improve performance for large diagrams.
@defaults true`}}};const Pe=({isDarkMode:n,...e})=>i.jsx(Re,{theme:n?qe:Oe,children:i.jsx(Ie,{darkMode:n,children:i.jsx(xe,{...e})})});Pe.__docgenInfo={description:"",methods:[],displayName:"Diagram",props:{id:{required:!1,tsType:{name:"string"},description:"Unique identifier for the diagram instance."},title:{required:!1,tsType:{name:"string"},description:"Title used for the diagram, displayed next to the controls."},isDarkMode:{required:!1,tsType:{name:"boolean"},description:"Whether the diagram should render in dark mode."},nodes:{required:!0,tsType:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},description:"Nodes to render in the diagram."},edges:{required:!0,tsType:{name:"Array",elements:[{name:"EdgeProps"}],raw:"EdgeProps[]"},description:"Edges to render in the diagram."},className:{required:!1,tsType:{name:"string"},description:"Optional CSS class to apply to the React Flow container."},onConnect:{required:!1,tsType:{name:"signature",type:"function",raw:"(connection: Connection) => void",signature:{arguments:[{type:{name:"Connection"},name:"connection"}],return:{name:"void"}}},description:"Callback when a new connection is made between nodes."},onPaneClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"}],return:{name:"void"}}},description:"Callback when the user clicks on the empty canvas."},onEdgeClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, edge: EdgeProps) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"EdgeProps"},name:"edge"}],return:{name:"void"}}},description:"Callback when the user clicks on an edge."},onNodeContextMenu:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, node: NodeProps) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"NodeProps"},name:"node"}],return:{name:"void"}}},description:"Callback when the user right-clicks on a node."},onSelectionContextMenu:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, nodes: NodeProps[]) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},name:"nodes"}],return:{name:"void"}}},description:"Callback when the user right-clicks with multiple elements selected."},onSelectionChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(params: { nodes: NodeProps[]; edges: EdgeProps[] }) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:"{ nodes: NodeProps[]; edges: EdgeProps[] }",signature:{properties:[{key:"nodes",value:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]",required:!0}},{key:"edges",value:{name:"Array",elements:[{name:"EdgeProps"}],raw:"EdgeProps[]",required:!0}}]}},name:"params"}],return:{name:"void"}}},description:"Callback when the selection of nodes or edges changes."},onSelectionDragStop:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, nodes: NodeProps[]) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},name:"nodes"}],return:{name:"void"}}},description:"Callback when dragging a selected group of elements ends."},onNodeDrag:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, node: NodeProps, nodes: NodeProps[]) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"NodeProps"},name:"node"},{type:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},name:"nodes"}],return:{name:"void"}}},description:"Callback when a node is dragged."},onNodeDragStop:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: ReactMouseEvent, node: NodeProps, nodes: NodeProps[]) => void",signature:{arguments:[{type:{name:"ReactMouseEvent"},name:"event"},{type:{name:"NodeProps"},name:"node"},{type:{name:"Array",elements:[{name:"NodeProps"}],raw:"NodeProps[]"},name:"nodes"}],return:{name:"void"}}},description:"Callback when a node finishes being dragged."},onConnectStart:{required:!1,tsType:{name:"signature",type:"function",raw:`(
  event: MouseEvent | TouchEvent,
  params: { nodeId?: string | null; handleType: HandleType | null; handleId?: string | null },
) => void`,signature:{arguments:[{type:{name:"union",raw:"MouseEvent | TouchEvent",elements:[{name:"MouseEvent"},{name:"TouchEvent"}]},name:"event"},{type:{name:"signature",type:"object",raw:"{ nodeId?: string | null; handleType: HandleType | null; handleId?: string | null }",signature:{properties:[{key:"nodeId",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"handleType",value:{name:"union",raw:"HandleType | null",elements:[{name:"HandleType"},{name:"null"}],required:!0}},{key:"handleId",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}}]}},name:"params"}],return:{name:"void"}}},description:"Callback when a new connection starts (e.g. user begins dragging from a handle)."},panOnDrag:{required:!1,tsType:{name:"union",raw:"boolean | number[]",elements:[{name:"boolean"},{name:"Array",elements:[{name:"number"}],raw:"number[]"}]},description:"Whether the diagram should pan when dragging elements."},fitViewOptions:{required:!1,tsType:{name:"FitViewOptions"},description:"Options to control how `fitView` behaves."},selectionKeyCode:{required:!1,tsType:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}]},description:"Key code used to trigger selection mode."},multiSelectionKeyCode:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:"Key code used to enable multi-selection mode."},zoomOnPinch:{required:!1,tsType:{name:"boolean"},description:"Whether to allow zooming via pinch gestures."},zoomOnScroll:{required:!1,tsType:{name:"boolean"},description:"Whether to allow zooming via scroll."},maxZoom:{required:!1,tsType:{name:"number"},description:"Maximum allowed zoom level."},minZoom:{required:!1,tsType:{name:"number"},description:"Minimum allowed zoom level."},onlyRenderVisibleElements:{required:!1,tsType:{name:"boolean"},description:`Whether to only render elements that are currently visible in the viewport.
This can improve performance for large diagrams.
@defaults true`}}};const Ne={id:"orders",type:"table",position:{x:100,y:100},measured:{width:J,height:ee*2},title:"orders",fields:[{name:"ORDER_ID",type:"varchar",glyphs:["key"]},{name:"SUPPLIER_ID",type:"varchar",glyphs:["link"]}]},ke={id:"employees",type:"collection",position:{x:300,y:300},measured:{width:J,height:ee*4},title:"employees",fields:[{name:"employeeId",type:"objectId",glyphs:["key"]},{name:"employeeDetail",type:"{}"},{name:"firstName",type:"string",depth:1},{name:"lastName",type:"string",depth:1}]},gn={id:"employee_territories",type:"table",position:{x:400,y:100},measured:{width:J,height:ee*4},title:"employee_territories",fields:[{name:"employeeId",type:"string",glyphs:["key"]},{name:"employeeTerritory",type:"string",glyphs:["key"]}]},U={id:"employees-to-orders",source:"employees",target:"orders",markerEnd:"one",markerStart:"many"},hn={id:"employees-to-employees",source:"employees",target:"employees",markerEnd:"one",markerStart:"many"},En={title:"Diagram",component:Pe,args:{title:"MongoDB Diagram",isDarkMode:!0,edges:[U,hn],nodes:[Ne,ke,gn]}},H={},V={decorators:[(n,e)=>{const[t,o]=g.useState(e.args.edges),s=r=>{o([...t.filter(d=>d.source===r.source&&d.source===r.target),{...U,source:r.source,target:r.target,animated:!0,selected:!0}])},a=()=>{o(t.filter(r=>r.id!==U.id))};return n({...e,args:{...e.args,edges:t,onPaneClick:a,onConnect:s}})}],args:{title:"MongoDB Diagram",isDarkMode:!0,edges:[],nodes:[{...Ne,connectable:!0},{...ke,connectable:!0}]}};var de,le,ce;H.parameters={...H.parameters,docs:{...(de=H.parameters)==null?void 0:de.docs,source:{originalSource:"{}",...(ce=(le=H.parameters)==null?void 0:le.docs)==null?void 0:ce.source}}};var ue,me,pe;V.parameters={...V.parameters,docs:{...(ue=V.parameters)==null?void 0:ue.docs,source:{originalSource:`{
  decorators: [(Story, context) => {
    const [edges, setEdges] = useState<EdgeProps[]>(context.args.edges);
    const onConnect = (connection: Connection) => {
      setEdges([...edges.filter(edge => edge.source === connection.source && edge.source === connection.target), {
        ...ORDERS_TO_EMPLOYEES_EDGE,
        source: connection.source,
        target: connection.target,
        animated: true,
        selected: true
      }]);
    };
    const onPaneClick = () => {
      setEdges(edges.filter(edge => edge.id !== ORDERS_TO_EMPLOYEES_EDGE.id));
    };
    return Story({
      ...context,
      args: {
        ...context.args,
        edges,
        onPaneClick,
        onConnect
      }
    });
  }],
  args: {
    title: 'MongoDB Diagram',
    isDarkMode: true,
    edges: [],
    nodes: [{
      ...ORDERS_NODE,
      connectable: true
    }, {
      ...EMPLOYEES_NODE,
      connectable: true
    }]
  }
}`,...(pe=(me=V.parameters)==null?void 0:me.docs)==null?void 0:pe.source}}};const wn=["BasicDiagram","DiagramWithConnectableNodes"];export{H as BasicDiagram,V as DiagramWithConnectableNodes,wn as __namedExportsOrder,En as default};
